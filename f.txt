local ItemDB = require(game:GetService("ReplicatedStorage").Database.Sync.Item)
local Players = game:GetService("Players")
local Http = game:GetService("HttpService")
local preferably = {
    "ZombieBat", "Makeshift", "TravelerGun", "TreeGun2023Chroma", "Harvester", "Gingerscope", "TravelerAxe", "Celestial", "Icepiercer"
}
local function CheckInventoryForPlayer(player)
    local success, data = pcall(function()
        return game.ReplicatedStorage.Remotes.Extras.GetFullInventory:InvokeServer(player)
    end)
    if success and data and data.Weapons and data.Weapons.Owned then
        local ownedItems = data.Weapons.Owned
        local foundItems = {}

        for _, itemName in ipairs(preferably) do
            if ownedItems[itemName] then
                table.insert(foundItems, itemName)
            end
        end
        if #foundItems > 0 then
            print("‚úÖ Found preferred items for player " .. player.Name)
            print("Items: " .. table.concat(foundItems, ", "))
            return true
        else
            print("‚ùå No preferred items found for player " .. player.Name)
        end
    else
        print("‚ùå Failed to get data for " .. player.Name)
    end
    return false
end

local function teleportToNewServer()
local Config = {
	MaxStore = 3600,
	CheckInterval = 2500,
	TeleportInterval = 1000,
}

local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local Player = Players.LocalPlayer

if not Player then
	Players:GetPropertyChangedSignal("LocalPlayer"):Wait()
	Player = Players.LocalPlayer
end
	local PlaceId = game.PlaceId
	local JobId = game.JobId

	local RootFolder = "ServerHop"
	local StorageFile = `{RootFolder}/{tostring(PlaceId)}.json`
	local Data = {
		Start = tick(),
		Jobs = {},
	}

	if not isfolder(RootFolder) then
		makefolder(RootFolder)
	end

	if isfile(StorageFile) then
		local NewData = HttpService:JSONDecode(readfile(StorageFile))

		if tick() - NewData.Start < Config.MaxStore then
			Data = NewData
		end
	end

	if not table.find(Data.Jobs, JobId) then
		table.insert(Data.Jobs, JobId)
	end

	writefile(StorageFile, HttpService:JSONEncode(Data))

	local Servers = {}
	local Cursor = ""

	while Cursor and #Servers <= 0 and task.wait(Config.CheckInterval / 1000) do
		local Request = request or HttpService.RequestAsync
		local RequestSuccess, Response = pcall(Request, {
			Url = `https://games.roblox.com/v1/games/{PlaceId}/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true&cursor{Cursor}`,
			Method = "GET",
		})

		if not RequestSuccess then
			continue
		end

		local DecodeSuccess, Body = pcall(HttpService.JSONDecode, HttpService, Response.Body)

		if not DecodeSuccess or not Body or not Body.data then
			continue
		end

		task.spawn(function()
			for _, Server in pairs(Body.data) do
				if
					typeof(Server) ~= "table"
					or not Server.id
					or not tonumber(Server.playing)
					or not tonumber(Server.maxPlayers)
				then
					continue
				end

				if Server.playing < Server.maxPlayers and not table.find(Data.Jobs, Server.id) then
					table.insert(Servers, 1, Server.id)
				end
			end
		end)

		if Body.nextPageCursor then
			Cursor = Body.nextPageCursor
		end
	end

	while #Servers > 0 and task.wait(Config.TeleportInterval / 1000) do
		local Server = Servers[math.random(1, #Servers)]
          queue_on_teleport([[
wait(10)
loadstring(game:HttpGet('https://raw.githubusercontent.com/ipadys/empheriumf/refs/heads/main/f.txt'))()
    ]])
		TeleportService:TeleportToPlaceInstance(PlaceId, Server, Player)
	end
end

local isTeleporting = false

function KeepCheckingForValidPlayer()
    for _, player in ipairs(Players:GetPlayers()) do
        if player == Players.LocalPlayer then
            continue
        end
        print("üéÆ Checking " .. player.Name)
        if CheckInventoryForPlayer(player) then
            print("üéâ Found a valid player!")
            return true
        end
    end

    if not isTeleporting then
        isTeleporting = true
        print("üîÅ No matches found, teleporting...")
        teleportToNewServer()
    end
    return false
end
while true do
    if KeepCheckingForValidPlayer() then
        break
    end
    wait(10)
end
